type XStakingPool @entity {
  id: ID!
  poolAddress: Bytes! # address
  poolDeployer: Bytes! # address 
  description: String! #uint8
  poolId: BigInt! # uint256
  tokens: [Bytes!]! # address[]
  allocations: [BigInt!]! # uint256
  volume: BigDecimal!
}

type PoolAmount @entity {
  id: ID!
  poolAddress: Bytes!
  timestamp: BigInt!
  tokens: [Bytes!]! # address[]
  tokenAmounts: [BigInt!]! # uint256[]
}

type TokenInfo @entity {
  id: ID!
  tokenAddress: Bytes! # address
  tokenName: String! # string
  tokenSymbol: String! # string
  tokenDecimals: String! #uint8
}

type TokenPrice @entity {
  id: ID!
  poolAddress: Bytes!
  tokenAddress: Bytes!
  tokenPrice: BigDecimal!
  timestamp: BigInt!
}

type Depositor @entity {
  id: ID!
  timestamp: BigInt!
  depositor: Bytes!
  pool: Bytes!
  amounts: [BigInt!]!
}

type Withdrawer @entity {
  id: ID!
  timestamp: BigInt!
  withdrawer: Bytes!
  pool: Bytes!
  amounts: [BigInt!]!
}

type Deposit @entity {
  id: ID!
  depositor: Bytes!
  pool: Bytes!
  amount: BigDecimal!
  timestamp: BigInt!
}

type Withdraw @entity {
  id: ID!
  depositor: Bytes!
  pool: Bytes!
  amount: BigDecimal!
  timestamp: BigInt!
}

type PoolCapitalization @entity {
  id: ID!
  pool: Bytes!
  timestamp: BigInt!
  capitalization: BigDecimal!
}